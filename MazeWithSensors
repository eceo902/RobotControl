#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl6,  limitSwitch,    sensorTouch)
#pragma config(Sensor, dgtl8,  sonarInput,     sensorSONAR_inch)
#pragma config(Motor,  port1,           leftMotor,     tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port10,          rightMotor,    tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Project Title: 3.1.7 Robot Control Design
Team Members: Evan Seeyave, Noah Bruckner, Raymond Shen, Sam Deason
Date:Date: 12/4/17
Section:


Task Description: Complete the maze using sensors


Pseudocode:
Push limit switch
Wait 1 second to run
Move forward using automatic straightening for a certain encoder count
Point turn right
Move forward using automatic straightening for a certain encoder count
Point turn right
Move forward using automatic straightening for a certain encoder count
Point turn left
Move forward using automatic straightening for a certain encoder count
Point turn left
Move forward using automatic straightening for a certain encoder count
Point turn left
Move forward using automatic straightening for a certain encoder count
Stop
*/
void moveStraight(int encoderCount)                                  //function to move forward
{
	int normalSpeed;    //variable normalSpeed=63
	int slowSpeed;			//variable slowSpeed=50
	normalSpeed = 63;
	slowSpeed = 40;

	SensorValue[rightEncoder] = 0;
	SensorValue[leftEncoder] = 0;

	while(SensorValue[leftEncoder] < encoderCount)
	{
		if(SensorValue[leftEncoder] > SensorValue[rightEncoder])
		{
			motor[rightMotor] = normalSpeed;
			motor[leftMotor] = slowSpeed;
		}
		else if(SensorValue[rightEncoder] > SensorValue[leftEncoder])
		{
			motor[rightMotor] = slowSpeed;
			motor[leftMotor] = normalSpeed;
		}
		else(SensorValue[rightEncoder] == SensorValue[leftEncoder])
		{
			motor[rightMotor] = normalSpeed;
			motor[leftMotor] = normalSpeed;
		}
	}

}

task main() {

	while(SensorValue[limitSwitch] == 0)   //Program begins, insert code within curly braces
	{
	}

	wait1Msec(2000);	//wait 2 seconds

	moveStraight(1250); //move straight until encoder counts 500

	motor[leftMotor] = 60;		//turn right
	motor[rightMotor] = -65;

	wait1Msec(1000);

	moveStraight(450);		//move forward

	wait1Msec(500);

	motor[leftMotor] = 60;		//turn right
	motor[rightMotor] = -65;

	wait1Msec(1000);

	moveStraight(750);		//move forward

	wait1Msec(500);

	motor[leftMotor] = -60;		//turn left
	motor[rightMotor] = 65;

	wait1Msec(890);

	moveStraight(2850);		//move forward

	wait1Msec(500);

	motor[leftMotor] = -60;		//turn left
	motor[rightMotor] = 65;

	wait1Msec(950);

	moveStraight(1525);		//move forward

	wait1Msec(500);

	motor[leftMotor] = -60;		//turn left
	motor[rightMotor] = 65;

	wait1Msec(950);

	moveStraight(860);		//move forward
}