#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl6,  limitSwitch,    sensorTouch)
#pragma config(Sensor, dgtl8,  sonarInput,     sensorSONAR_inch)
#pragma config(Motor,  port1,           leftMotor,     tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port10,          rightMotor,    tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Project Title: 3.1.7 Robot Control Design
Team Members: Evan Seeyave, Noah Bruckner, Raymond Shen, Sam Deason
Date: 12/4/17
Section:


Task Description: Foward/Backward with Button Push


Pseudocode:
Push limit switch
Wait 1 second to run
Move forward using automated straightening
Move backward using automated straightening
Repeat move forward and backward until limit switch is held to stop


*/
void moveStraight(int encoderCount)
{
	int normalSpeed;    //variable normalSpeed=63
	int slowSpeed;			//variable slowSpeed=50
	normalSpeed = 70;
	slowSpeed = 60;

	SensorValue[rightEncoder] = 0;
	SensorValue[leftEncoder] = 0;

	while(SensorValue[leftEncoder] < encoderCount)
	{
		if(SensorValue[leftEncoder] > SensorValue[rightEncoder])
		{
			motor[rightMotor] = normalSpeed;
			motor[leftMotor] = slowSpeed;
		}
		if(SensorValue[rightEncoder] > SensorValue[leftEncoder])
		{
			motor[rightMotor] = slowSpeed;
			motor[leftMotor] = normalSpeed;
		}
		if(SensorValue[rightEncoder] == SensorValue[leftEncoder])
		{
			motor[rightMotor] = normalSpeed;
			motor[leftMotor] = normalSpeed;
		}
	}
}


void moveBack(int encoderCount)
{
	int normalSpeed;    //variable normalSpeed=63
	int slowSpeed;			//variable slowSpeed=50
	normalSpeed = -70;
	slowSpeed = -60;

	SensorValue[rightEncoder] = 0;
	SensorValue[leftEncoder] = 0;

	while(SensorValue[leftEncoder] > encoderCount)
	{
		if(SensorValue[leftEncoder] < SensorValue[rightEncoder])
		{
			motor[rightMotor] = normalSpeed;
			motor[leftMotor] = slowSpeed;
		}
		if(SensorValue[rightEncoder] < SensorValue[leftEncoder])
		{
			motor[rightMotor] = slowSpeed;
			motor[leftMotor] = normalSpeed;
		}
		if(SensorValue[rightEncoder] == SensorValue[leftEncoder])
		{
			motor[rightMotor] = normalSpeed;
			motor[leftMotor] = normalSpeed;
		}
	}
}
float wheelDiameter = 2.75;

int distance = 54;

int count = (distance*(360)/(wheelDiameter*PI));    //Variable for

task main() {

	while(SensorValue[limitSwitch] == 0)
	{
	}

	wait1Msec(1000);

	while(SensorValue[limitSwitch] == 0)
	{

		moveBack(-count);

		motor[leftMotor]=0;
		motor[rightMotor]=0;

		wait1Msec(2000);

		moveStraight(count);

		motor[leftMotor]=0;
		motor[rightMotor]=0;

		wait1Msec(2000);



	}


}