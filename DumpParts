#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl6,  limitSwitch,    sensorTouch)
#pragma config(Sensor, dgtl9,  sonarInput,     sensorSONAR_inch)
#pragma config(Motor,  port1,           leftMotor,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port6,           armRight,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           armLeft,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          rightMotor,    tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Project Title: 3.1.7 Robot Control Design
Team Members: Evan Seeyave, Noah Bruckner, Raymond Shen, Sam Deason
Date:Date: 12/4/17
Section:


Task Description: Dump parts in bin with slow dump


Pseudocode:
Push limit switch
Wait 1 second to run
Move forward using automated straightening
Stop when ultrasonic sensor reads a certain value (close to the dump bin)
Activate motors to rotate arm to dump legos into the bin

*/

task main()
{						//Program begins, insert code within curly braces

	while(SensorValue[limitSwitch] == 0)		//limit switch
	{		//idle loop
	}
	wait1Msec(2000);		//wait 2 seconds

	while(SensorValue[sonarInput] > 1)		//forward until ultrasonic is within one inch of bucket
	{
		motor[leftMotor] = 50;
		motor[rightMotor] = 55;
	}

	motor[leftMotor] = 0;		 //stop motors
	motor[rightMotor] = 0;

	wait1Msec(2000);		     //wait 2 seconds

	motor[armLeft] = 15;		 //move arms down
	motor[armRight] = 15;
	wait1Msec(2700);

	motor[armLeft] = 0;		  //wait 6 seconds
	motor[armRight] = 0;
	wait1Msec(6000);

	motor[armLeft] = -15;		//move arms back up
	motor[armRight] = -15;
	wait1Msec(2700);

	motor[leftMotor] = -59;		//move backward
	motor[rightMotor] = -65;
	wait1Msec(3200);

	motor[leftMotor] = 0;		 //stop
	motor[rightMotor] = 0;

}